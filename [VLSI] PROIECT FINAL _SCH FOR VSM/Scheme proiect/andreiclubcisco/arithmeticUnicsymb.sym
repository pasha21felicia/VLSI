USER SYMBOL by DSCH3
DATE 5/24/2009 9:03:41 PM
SYM  #arithmeticUnicsymb
BB(0,0,40,110)
TITLE 10 -7  #arithmeticUnicsymb
MODEL 6000
REC(5,5,30,100)
PIN(0,10,0.00,0.00)A0
PIN(0,20,0.00,0.00)A1
PIN(0,30,0.00,0.00)A2
PIN(0,40,0.00,0.00)A3
PIN(0,70,0.00,0.00)B0
PIN(0,80,0.00,0.00)B1
PIN(0,90,0.00,0.00)B2
PIN(0,100,0.00,0.00)B3
PIN(0,60,0.00,0.00)AdunaresauScadere
PIN(0,50,0.00,0.00)ActiveazaALU
PIN(40,50,2.00,1.00)Rezultat3
PIN(40,40,2.00,1.00)Rezultat2
PIN(40,30,2.00,1.00)Rezultat1
PIN(40,20,2.00,1.00)Rezultat0
PIN(40,10,2.00,1.00)Carry
LIG(0,10,5,10)
LIG(0,20,5,20)
LIG(0,30,5,30)
LIG(0,40,5,40)
LIG(0,70,5,70)
LIG(0,80,5,80)
LIG(0,90,5,90)
LIG(0,100,5,100)
LIG(0,60,5,60)
LIG(0,50,5,50)
LIG(35,50,40,50)
LIG(35,40,40,40)
LIG(35,30,40,30)
LIG(35,20,40,20)
LIG(35,10,40,10)
LIG(5,5,5,105)
LIG(5,5,35,5)
LIG(35,5,35,105)
LIG(35,105,5,105)
VLG module arithmeticUnic( A0,A1,A2,A3,B0,B1,B2,B3,
VLG  AdunaresauScadere,ActiveazaALU,Rezultat3,Rezultat2,Rezultat1,Rezultat0,Carry);
VLG  input A0,A1,A2,A3,B0,B1,B2,B3;
VLG  input AdunaresauScadere,ActiveazaALU;
VLG  output Rezultat3,Rezultat2,Rezultat1,Rezultat0,Carry;
VLG  wire w3,w5,w6,w7,w9,w11,w12,w14;
VLG  wire w15,w17,w18,w19,w21,w28,w30,w32;
VLG  wire w33,w34,w35,w36,w37,w38,w39,w40;
VLG  wire w41,w42,w43,w44,w45,w46,w47,w48;
VLG  mux #(24) mux_1(w5,B1,w3,AdunaresauScadere);
VLG  bufif1 #(10) bufif1_2(Rezultat3,w9,ActiveazaALU);
VLG  bufif1 #(10) bufif1_3(Rezultat2,w14,ActiveazaALU);
VLG  bufif1 #(10) bufif1_4(Rezultat1,w17,ActiveazaALU);
VLG  bufif1 #(10) bufif1_5(Rezultat0,w21,ActiveazaALU);
VLG  not #(10) inv_6(w3,B1);
VLG  not #(10) inv_7(w28,B0);
VLG  mux #(24) mux_8(w19,B0,w28,AdunaresauScadere);
VLG  mux #(24) mux_9(w12,B2,w30,AdunaresauScadere);
VLG  not #(10) inv_10(w30,B2);
VLG  not #(10) inv_11(w32,B3);
VLG  mux #(24) mux_12(w7,B3,w32,AdunaresauScadere);
VLG  mux #(17) mux_13(w18,vss,vdd,AdunaresauScadere);
VLG  or #(15) or2_1_14(Carry,w33,w34);
VLG  and #(15) and2_2_15(w33,w7,A3);
VLG  xor #(15) xor2_3_16(w9,w35,w6);
VLG  xor #(15) xor2_4_17(w35,A3,w7);
VLG  or #(15) or2_5_18(w36,A3,w7);
VLG  and #(15) and2_6_19(w34,w6,w36);
VLG  or #(22) or2_1_20(w6,w37,w38);
VLG  and #(15) and2_2_21(w37,w12,A2);
VLG  xor #(15) xor2_3_22(w14,w39,w11);
VLG  xor #(15) xor2_4_23(w39,A2,w12);
VLG  or #(15) or2_5_24(w40,A2,w12);
VLG  and #(15) and2_6_25(w38,w11,w40);
VLG  or #(22) or2_1_26(w11,w41,w42);
VLG  and #(15) and2_2_27(w41,w5,A1);
VLG  xor #(15) xor2_3_28(w17,w43,w15);
VLG  xor #(15) xor2_4_29(w43,A1,w5);
VLG  or #(15) or2_5_30(w44,A1,w5);
VLG  and #(15) and2_6_31(w42,w15,w44);
VLG  or #(22) or2_1_32(w15,w45,w46);
VLG  and #(15) and2_2_33(w45,w19,A0);
VLG  xor #(15) xor2_3_34(w21,w47,w18);
VLG  xor #(15) xor2_4_35(w47,A0,w19);
VLG  or #(15) or2_5_36(w48,A0,w19);
VLG  and #(15) and2_6_37(w46,w18,w48);
VLG endmodule
FSYM
